keycloak:
  enabled: true
  image: quay.io/keycloak/keycloak
  imageTag: 26.2.5
  replicaCount: 2
  host: ''
  tlsEnabled: false
  admin:
    username: ''
    password: ''
  db:
    enabled: true
    username: ''
    password: ''
    host: ''
    name: ''
  resources:
    limits:
      cpu: 2000m
      memory: 2000Mi
    requests:
      cpu: 500m
      memory: 1700Mi

db:
  enabled: false
  image:
    repository: mirror.gcr.io/postgres
    tag: "17"
  replicaCount: 1
  secretName: keycloak-secret
  logStatement: "all"
  persistence:
    enabled: false
    existingClaim: ""
  service:
    type: ClusterIP


ingress:
  enabled: true
  name: keycloak-ingress
  namespace: ''
  class: alb
  annotations:
    acmCertificateArn: ''
    listenPorts: '[{"HTTP":8080}]'
    sslRedirect: "443"
    loadBalancerAttributes: 'routing.http.drop_invalid_header_fields.enabled=true'
    scheme: internet-facing
    targetType: ip
    backendProtocol: HTTP
    healthcheckPort: "status-port"
    healthcheckProtocol: HTTP
    subnetAllowList: ''
  tlsEnabled: false
  tlsSecretName: keycloak-tls
  host: ''
  path: "/"
  pathType: Prefix
  serviceName: keycloak
  servicePort: 8080
  servicePortName: keycloak
  extraPaths:
    - path: /health/*
      pathType: Prefix
    - path: /health
      pathType: Prefix
    - path: /metrics
      pathType: Prefix

# Les credentials sont gérés via des secrets Kubernetes (keycloak-admin et keycloak-db)
# Pour les tests, créez les secrets avec :
# kubectl create secret generic keycloak-admin --from-literal=username=admin --from-literal=password=admin
# kubectl create secret generic keycloak-db --from-literal=username=keycloak --from-literal=password=keycloak
